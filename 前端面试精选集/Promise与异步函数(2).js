/**
 * 题目五：一个页面的脚本如下，请问会打印出什么内容？
 */

//setTimeout()、 interval()均为宏任务

setTimeout(() => {
    console.log(1);
    Promise.resolve(3).then((data) => console.log(data));
}, 0);

setTimeout(() => {
    console.log(2);
}, 0);

/**
 * 解释：
 * 1.先执行整体代码，没有发现微任务；
 * 2.再执行下一个宏任务—setTimeout回调函数，打印出1；
 * 3.遇到微任务—Promise 回调函数；
 * 4.立即执行微任务，打印出3；
 * 5.微任务队列被清空，执行下一个宏任务—下一个 setTimeout回调函数，打印出2。
 */

/**
 * 总结：
 *
 * 再回顾一遍 Event Loop 的执行规则。
 *
 * 1.首先 JavaScript 引擎会执行一个宏任务，注意这个宏任务一般是指主干代码本身，也就是目前的同步代码；
 * 2.执行过程中如果遇到微任务，就把它添加到微任务任务队列中；
 * 3.宏任务执行完成后，立即执行当前微任务队列中的微任务，直到微任务队列被清空；
 * 4.微任务执行完成后，开始执行下一个宏任务；
 * 5.如此循环往复，直到宏任务和微任务被清空。
 * 实际上，基本所有和异步相关的问题都可以用 Event Loop 来解释。
 */